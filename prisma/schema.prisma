datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?
  password      String?
  role          RoleType  @default(user)
  verified      Boolean   @default(false)
  bio           String?
  link          String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  likes     Like[]

  followedByIDs String[] @db.ObjectId
  followingIDs  String[] @db.ObjectId

  followedBy User[] @relation("follows", fields: [followedByIDs], references: [id])
  following  User[] @relation("follows", fields: [followingIDs], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  caption  String
  parentId String? @db.ObjectId
  quoteId  String? @db.ObjectId
  userId   String  @db.ObjectId
  repostId String? @db.ObjectId
  medias   Media[]
  likes    Like[]
  parent   Post?   @relation("reply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Post[]  @relation("reply")
  reposted Post?   @relation("repost", fields: [repostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reposts  Post[]  @relation("repost")
  quote    Post?   @relation("quote", fields: [quoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotedBy Post[]  @relation("quote")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Media {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  name        String
  source      String
  type        String
  aspectRatio String @default("1")
  postId      String @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum RoleType {
  user
  admin
}
